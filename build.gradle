plugins {
  id 'groovy'
  id 'java'
  id 'jacoco'
  id 'net.saliman.cobertura' version '4.0.0'
}

group 'emt'
version '1.0-SNAPSHOT'

def agent_archive = "test-agent.jar"

// Coverage settings
def minimum_instruction_coverage = 0.99
def minimum_branch_coverage = 0.98
def coverage_include_classes = "com/emt/**"

sourceCompatibility = source_compatibility

repositories {
    mavenCentral()
    maven { url 'https://repo.jenkins-ci.org/releases/' }
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation 'org.eclipse.hudson:hudson-core:3.2.1'
    implementation 'com.cloudbees:groovy-cps:1.32@jar'
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.4'
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'com.google.guava:guava:23.5-jre'
    testImplementation 'net.bytebuddy:byte-buddy:1.9.10'
}

sourceSets {
    main {
        java {
            srcDirs = []
        }
        groovy {
            srcDirs = ['src', 'vars']
        }
    }
    test {
        java {
            srcDirs = []
        }
        groovy {
            srcDirs = ['test/src', 'test/vars']
        }
    }
}

tasks.register('agentJar', Jar) {
    description 'Assembles a jar archive containing the Java agent.'
    
    dependsOn 'compileTestJava', 'compileTestGroovy'
    
    archiveFileName = agent_archive

    from(['build/classes/java/test/com/emt/util/TestInstrumentationAgent.class'])

    manifest {
        attributes(
                'Premain-Class': 'com.emt.util.TestInstrumentationAgent',
                'Can-Redefine-Classes': 'true',
                'Can-Retransform-Classes': 'true',
                'Can-Set-Native-Method-Prefix': 'true',
                'Implementation-Title': "ClassLogger",
                'Implementation-Version': rootProject.version
        )
    }

}

compileGroovy {
	doFirst {
		if (enable_cps) {
			println 'Compiling Groovy with CPS'
			groovyOptions.configurationScript = file("config/groovyCompilerConfig.groovy")
			//horrible no-good hack to add groovy-cps to groovyClasspath
			groovyClasspath += sourceSets.main.compileClasspath
		}
	}
}

test {
    dependsOn 'agentJar'

    doFirst {
        systemProperty 'com.emt.use_cps', enable_cps
        systemProperty 'com.emt.unit_testing_enabled', true
    }

    jvmArgs "-javaagent:$buildDir/libs/${agent_archive}"
}


cobertura {
    coverageIncludes = ['.*com.emt.*']
    coverageFormats = ['html', 'xml']
    coverageIgnoreMethodAnnotations = ['com.emt.common.CoverageIgnoreGenerated']
}

jacoco {
    toolVersion = jacoco_version
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, include: [
                coverage_include_classes
            ])
        }))
    }

    finalizedBy jacocoTestCoverageVerification

}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value   = 'COVEREDRATIO'
                minimum = minimum_instruction_coverage
            }
            limit {
                counter = 'BRANCH'
                value   = 'COVEREDRATIO'
                minimum = minimum_branch_coverage
            }
            // JaCoCo isn't very reliable at reporting line coverage
            //limit { 
            //    counter = 'LINE'
            //    value   = 'COVEREDRATIO'
            //    minimum = 1.0
            //}
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, include: [
                coverage_include_classes
            ])
        }))
    }

}

// to run coverage verification during the build (and fail when appropriate)
jacocoTestCoverageVerification.dependsOn jacocoTestReport

// NOTE: Disable groovy optimizations to get more accurate coverage results
// See https://pbetkier.github.io/2014/08/07/groovy-code-coverage-issues.html
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':cobertura') || graph.hasTask(':jacocoTestReport')) {
        compileGroovy.groovyOptions.optimizationOptions.all = false
        project.ext.enable_cps = false
    } else if (graph.hasTask(test)) {
        println 'Enabling CPS'
        project.ext.enable_cps = true
    }
}

if (hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}
