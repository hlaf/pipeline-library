plugins {
  id 'groovy'
  id 'java'
  id 'jacoco'
  id 'net.saliman.cobertura' version "4.0.0" apply false
}

group 'emt'
version '1.0-SNAPSHOT'

def agent_archive = "test-agent.jar"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://repo.jenkins-ci.org/releases/' }
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation 'org.eclipse.hudson:hudson-core:3.2.1'
    implementation "com.cloudbees:groovy-cps:1.32@jar"
    testImplementation group: 'junit', name: 'junit', version: '4.13'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.4'
    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation group: 'com.google.guava', name: 'guava', version: '23.5-jre'
    testImplementation 'net.bytebuddy:byte-buddy:LATEST'

}

sourceSets {
    main {
        java {
            srcDirs = []
        }
        groovy {
            srcDirs = ['src', 'vars']
        }
    }
    test {
        java {
            srcDirs = []
        }
        groovy {
            srcDirs = ['test/src', 'test/vars']
        }
    }
}

tasks.register('agentJar', Jar) {
    description 'Assembles a jar archive containing the Java agent.'
    
    dependsOn 'compileTestJava', 'compileTestGroovy'
    
    archiveName = agent_archive

    from(['build/classes/java/test/com/emt/util/TestInstrumentationAgent.class'])

    manifest {
        attributes(
                'Premain-Class': 'com.emt.util.TestInstrumentationAgent',
                'Can-Redefine-Classes': 'true',
                'Can-Retransform-Classes': 'true',
                'Can-Set-Native-Method-Prefix': 'true',
                'Implementation-Title': "ClassLogger",
                'Implementation-Version': rootProject.version
        )
    }

}

test {
    dependsOn 'agentJar'

    systemProperty 'com.emt.use_cps', enable_cps.toBoolean()

    jvmArgs "-javaagent:$buildDir/libs/${agent_archive}"

    if (use_jacoco.toBoolean()) {
        finalizedBy jacocoTestReport
    }
}

if (use_cobertura.toBoolean()) {
    apply plugin: 'net.saliman.cobertura' 

    cobertura {
        coverageIncludes = ['.*com.emt.*']
        coverageFormats = ['html', 'xml']
        coverageIgnoreMethodAnnotations = ['com.emt.common.CoverageIgnoreGenerated']
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, include: [
                "com/emt/**"
            ])
        }))
    }

}

compileGroovy {
    if (enable_cps.toBoolean() == true) {
        groovyOptions.configurationScript = file("config/groovyCompilerConfig.groovy")
        //horrible no-good hack to add groovy-cps to groovyClasspath
        groovyClasspath += sourceSets.main.compileClasspath
    }
}

// NOTE: Disable groovy optimizations to get more accurate coverage results
// See https://pbetkier.github.io/2014/08/07/groovy-code-coverage-issues.html
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':cobertura') || graph.hasTask(':jacocoTestReport')) {
        compileGroovy.groovyOptions.optimizationOptions.all = false
    }
}